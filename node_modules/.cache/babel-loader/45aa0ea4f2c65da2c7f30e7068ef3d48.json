{"ast":null,"code":"var _jsxFileName = \"/Users/mario/Documents/GitHub/whawhai/src/components/Router.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { Register, Status } from \"../api/axios\";\nimport Dialog from \"./common/Dialog\";\nimport { errors } from \"../utils/errors\";\nimport Home from \"../views/Home\";\nimport SelectWarrior from \"../views/SelectWarrior\";\nimport Waiting from \"../views/Waiting\";\nimport Fighting from \"../views/Fighting\";\nimport Done from \"../views/Done\"; //Warrior - object sent to the Register method as application and received in fight report\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Router = () => {\n  _s();\n\n  //warrior - stores your warrior information, send to Register method\n  const [warrior, setWarrior] = useState({\n    Name: \"\",\n    WarriorType: 0,\n    Attacks: [-99, -99, -99]\n  }); //frequency of checking the fight status while waiting for the fight to be concluded (ms)\n\n  const timeout = 2000; //used instead of react-router-dom so that everything is under \"/\"\n\n  const [dialogOpen, setDialogOpen] = useState(false); //dialog trigger\n\n  const [warriorSelection, setWarriorSelection] = useState(false); //switch to SelectWarrior\n\n  const [waitingScreen, setWaitingScreen] = useState(false); //switch to Waiting\n\n  const [fightingScreen, setFightingScreen] = useState(false); //switch to Fighting\n\n  const [doneScreen, setDoneScreen] = useState(false); //switch to Done\n\n  const [message, setMessage] = useState(\"\"); //message to display in the modal\n\n  const [severity, setSeverity] = useState(\"info\"); //severity of the modal - \"error\" or info(any)\n  //storing the fight result received as a reply from the Status method\n\n  const [fightResult, setFightResult] = useState({\n    ID: \"\",\n    Status: 0,\n    Warrior1: {\n      Name: \"\",\n      WarriorType: 0,\n      Attacks: [0]\n    },\n    Warrior2: {\n      Name: \"\",\n      WarriorType: 0,\n      Attacks: [0]\n    },\n    Rounds: [{\n      Warrior1Attack: 0,\n      Warrior2Attack: 0\n    }]\n  }); //sets used to check if the numbers in warrior.WarriorType and warrior.Attacks are valid \n  //easier and cleaner to use - Set.has(x)\n\n  const warriorTypeSet = new Set([0, 1, 2, 3, 4]);\n  const warriorAttacksSet = new Set([0, 1, 2]); //storing the fight id generated in the Register method reply\n\n  const [currentFightId, setCurrentFightId] = useState(\"\"); //loop for checking and handling the fight result - occurres every {timeout} ms\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if ((waitingScreen || fightingScreen) && currentFightId) {\n        //if not on Waiting or Fighting screen - stop here\n        Status(currentFightId).then(result => {\n          if (result.data.result) {\n            //is fulfilled?\n            if (result.data.result.fight.Status === 1) {\n              //fighting in progress\n              setWaitingScreen(false);\n              setFightingScreen(true);\n              setDoneScreen(false);\n              setFightResult(result.data.result.fight);\n            }\n\n            if (result.data.result.fight.Status === 2) {\n              //fighting finished\n              setDialogOpen(false); //close the possibly triggered surrender dialog as the results are in\n\n              setWaitingScreen(false);\n              setFightingScreen(false);\n              setDoneScreen(true);\n              setFightResult(result.data.result.fight);\n            }\n          } else if (result.data.error) {\n            //error handling\n            setSeverity(\"error\");\n            setMessage(result.data.error.message);\n            setDialogOpen(true);\n          }\n        });\n      }\n    }, timeout);\n    return () => clearInterval(interval); //key to making this a loop\n  }, [waitingScreen, fightingScreen, currentFightId]); //deps\n  //returns winners by rounds and overall\n\n  const calculateWinner = () => {\n    //calculates the winner for each round\n    const roundWinner = r => {\n      switch (r.Warrior1Attack) {\n        case 0:\n          {\n            if (r.Warrior2Attack === 0) return 0; //paper - paper: tie\n            else if (r.Warrior2Attack === 1) return 2; //paper - scissors - w2\n            else if (r.Warrior2Attack === 2) return 1; //paper - rock - w1\n\n            break;\n          }\n\n        case 1:\n          {\n            if (r.Warrior2Attack === 0) return 1; //scissors - paper: w1\n            else if (r.Warrior2Attack === 1) return 0; //scissors - scissors - tie\n            else if (r.Warrior2Attack === 2) return 2; //scissors - rock - w2\n\n            break;\n          }\n\n        case 2:\n          {\n            if (r.Warrior2Attack === 0) return 2; //rock - paper: w2\n            else if (r.Warrior2Attack === 1) return 1; //rock - scissors - w1\n            else if (r.Warrior2Attack === 2) return 0; //rock - rock - tie\n\n            break;\n          }\n      }\n\n      return -99;\n    };\n\n    let winner = []; //winners of each round, example \n    //[0,1,2] - round 1-tie, 2-player1, 3-player2\n\n    let counts = [0, 0, 0]; //frequency of rounds won, example\n    //[2,1,0] - 2 rounds were tied, player1 won 1 round - player1 wins\n\n    fightResult.Rounds.map(round => winner.push(roundWinner(round)) //populate the round winners array\n    );\n\n    for (const num of winner) {\n      counts[num] = counts[num] ? counts[num] + 1 : 1; //count frequency of rounds won\n    } //player1 won at least 2 rounds or he won 1 and tied 2 - player1 wins\n\n\n    if (counts[1] > 1 || counts[1] > 0 && counts[0] > 1) return {\n      roundWinners: winner,\n      matchWinner: 1\n    }; //player2 won at least 2 rounds or he won 1 and tied 2 - player2 wins \n    else if (counts[2] > 1 || counts[2] > 0 && counts[0] > 1) return {\n      roundWinners: winner,\n      matchWinner: 2\n    }; //none of the above happened, players are tied\n    else if (counts[0] > 1) return {\n      roundWinners: winner,\n      matchWinner: 0\n    };\n    return -99;\n  }; //check if warrior object is ready to be sent to the server - if yes, send it\n\n\n  const validateForm = () => {\n    let err = 0; //error code as defined in errors.ts\n\n    if (warrior.Name.length <= 0) err = 1; //no name input\n    else if (warrior.Name.length >= 26) err = 2; //name too long\n    else if (!warriorTypeSet.has(warrior.WarriorType)) err = 3; //invalid warrior type - unlikely\n    else if (warrior.Attacks.length !== 3) err = 4; //invalid length of the Attacks array - unlikely\n    else if (!warriorAttacksSet.has(warrior.Attacks[0])) err = 5; //warrior attack #x is not selected\n    else if (!warriorAttacksSet.has(warrior.Attacks[1])) err = 6;else if (!warriorAttacksSet.has(warrior.Attacks[2])) err = 7;\n\n    if (err === 0) {\n      //no error\n      Register(warrior).then(result => {\n        if (result.data.result) {\n          setCurrentFightId(result.data.result.id);\n          setWaitingScreen(true);\n        } else if (result.data.error) {\n          setSeverity(\"error\");\n          setMessage(result.data.error.message);\n          setDialogOpen(true);\n        }\n      });\n    } else {\n      setMessage(errors[err - 1]);\n      setSeverity(\"error\");\n      setDialogOpen(true);\n    }\n\n    ; //display error\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\",\n      maxWidth: \"45vw\",\n      marginLeft: \"30vw\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Dialog, {\n      severity: severity,\n      open: dialogOpen,\n      setOpen: setDialogOpen,\n      message: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this), warriorSelection ? /*#__PURE__*/_jsxDEV(SelectWarrior, {\n      warrior: warrior,\n      setWarrior: setWarrior,\n      setWarriorSelection: setWarriorSelection\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 9\n    }, this) : waitingScreen ? /*#__PURE__*/_jsxDEV(Waiting, {\n      warrior: warrior,\n      currentFightId: currentFightId,\n      setCurrentFightId: setCurrentFightId,\n      setWaitingScreen: setWaitingScreen,\n      setSeverity: setSeverity,\n      setMessage: setMessage,\n      setDialogOpen: setDialogOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 9\n    }, this) : fightingScreen && fightResult ? /*#__PURE__*/_jsxDEV(Fighting, {\n      warrior: warrior,\n      fightResult: fightResult,\n      setSeverity: setSeverity,\n      setMessage: setMessage,\n      setDialogOpen: setDialogOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 9\n    }, this) : doneScreen ? /*#__PURE__*/_jsxDEV(Done, {\n      fightResult: fightResult,\n      calculateMatchWinner: calculateMatchWinner,\n      calculateWinner: calculateWinner,\n      setDoneScreen: setDoneScreen,\n      setWaitingScreen: setWaitingScreen,\n      validateForm: validateForm\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Home, {\n      warrior: warrior,\n      setWarrior: setWarrior,\n      setWarriorSelection: setWarriorSelection,\n      validateForm: validateForm\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Router, \"az5NDh20dvs/e57yJT74AjXJ46Y=\");\n\n_c = Router;\nexport default Router;\n\nvar _c;\n\n$RefreshReg$(_c, \"Router\");","map":{"version":3,"names":["useEffect","useState","Register","Status","Dialog","errors","Home","SelectWarrior","Waiting","Fighting","Done","Router","warrior","setWarrior","Name","WarriorType","Attacks","timeout","dialogOpen","setDialogOpen","warriorSelection","setWarriorSelection","waitingScreen","setWaitingScreen","fightingScreen","setFightingScreen","doneScreen","setDoneScreen","message","setMessage","severity","setSeverity","fightResult","setFightResult","ID","Warrior1","Warrior2","Rounds","Warrior1Attack","Warrior2Attack","warriorTypeSet","Set","warriorAttacksSet","currentFightId","setCurrentFightId","interval","setInterval","then","result","data","fight","error","clearInterval","calculateWinner","roundWinner","r","winner","counts","map","round","push","num","roundWinners","matchWinner","validateForm","err","length","has","id","textAlign","maxWidth","marginLeft","calculateMatchWinner"],"sources":["/Users/mario/Documents/GitHub/whawhai/src/components/Router.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { Register, Status } from \"../api/axios\";\r\nimport Dialog from \"./common/Dialog\";\r\nimport { errors } from \"../utils/errors\";\r\nimport Home from \"../views/Home\";\r\nimport SelectWarrior from \"../views/SelectWarrior\";\r\nimport Waiting from \"../views/Waiting\";\r\nimport Fighting from \"../views/Fighting\";\r\nimport Done from \"../views/Done\";\r\n\r\n\r\n//Warrior - object sent to the Register method as application and received in fight report\r\nexport interface Warrior {\r\n  Name: string;\r\n  WarriorType: number;\r\n  Attacks: number[];\r\n}\r\n\r\n//Round - defines one of 3 rounds in a match\r\ninterface Round {\r\n  Warrior1Attack: number;\r\n  Warrior2Attack: number;\r\n}\r\n\r\n//Fight - received as a reply from the Status method\r\nexport interface Fight {\r\n  ID: string;\r\n  Status: number;\r\n  Warrior1: Warrior;\r\n  Warrior2: Warrior;\r\n  Rounds: Round[];\r\n  Err?: any; //?\r\n}\r\n\r\nconst Router = () => {\r\n  //warrior - stores your warrior information, send to Register method\r\n  const [warrior, setWarrior] = useState<Warrior>({\r\n    Name: \"\",\r\n    WarriorType: 0,\r\n    Attacks: [-99, -99, -99],\r\n  });\r\n\r\n  //frequency of checking the fight status while waiting for the fight to be concluded (ms)\r\n  const timeout: number = 2000;\r\n\r\n  //used instead of react-router-dom so that everything is under \"/\"\r\n  const [dialogOpen, setDialogOpen] = useState<boolean>(false); //dialog trigger\r\n  const [warriorSelection, setWarriorSelection] = useState<boolean>(false); //switch to SelectWarrior\r\n  const [waitingScreen, setWaitingScreen] = useState<boolean>(false); //switch to Waiting\r\n  const [fightingScreen, setFightingScreen] = useState<boolean>(false); //switch to Fighting\r\n  const [doneScreen, setDoneScreen] = useState<boolean>(false); //switch to Done\r\n\r\n  const [message, setMessage] = useState<string>(\"\") //message to display in the modal\r\n  const [severity, setSeverity] = useState<string>(\"info\") //severity of the modal - \"error\" or info(any)\r\n\r\n  //storing the fight result received as a reply from the Status method\r\n  const [fightResult, setFightResult] = useState<Fight>({\r\n    ID: \"\",\r\n    Status: 0,\r\n    Warrior1: { Name: \"\", WarriorType: 0, Attacks: [0] },\r\n    Warrior2: { Name: \"\", WarriorType: 0, Attacks: [0] },\r\n    Rounds: [{ Warrior1Attack: 0, Warrior2Attack: 0 }],\r\n  });\r\n\r\n  //sets used to check if the numbers in warrior.WarriorType and warrior.Attacks are valid \r\n  //easier and cleaner to use - Set.has(x)\r\n  const warriorTypeSet: Set<number> = new Set([0, 1, 2, 3, 4]);\r\n  const warriorAttacksSet: Set<number> = new Set([0, 1, 2]);\r\n\r\n  //storing the fight id generated in the Register method reply\r\n  const [currentFightId, setCurrentFightId] = useState<string>(\"\");\r\n\r\n  //loop for checking and handling the fight result - occurres every {timeout} ms\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      if ((waitingScreen || fightingScreen) && currentFightId) { //if not on Waiting or Fighting screen - stop here\r\n        Status(currentFightId).then((result) => {\r\n          if (result.data.result) { //is fulfilled?\r\n            if (result.data.result.fight.Status === 1) { //fighting in progress\r\n              setWaitingScreen(false);\r\n              setFightingScreen(true);\r\n              setDoneScreen(false);\r\n              setFightResult(result.data.result.fight);\r\n            }\r\n            if (result.data.result.fight.Status === 2) { //fighting finished\r\n              setDialogOpen(false); //close the possibly triggered surrender dialog as the results are in\r\n              setWaitingScreen(false);\r\n              setFightingScreen(false);\r\n              setDoneScreen(true);\r\n              setFightResult(result.data.result.fight);\r\n            }\r\n          }\r\n          else if (result.data.error) { //error handling\r\n            setSeverity(\"error\");\r\n            setMessage(result.data.error.message);\r\n            setDialogOpen(true);\r\n          }\r\n        }\r\n        );\r\n      }\r\n    }, timeout);\r\n    return () => clearInterval(interval); //key to making this a loop\r\n  }, [waitingScreen, fightingScreen, currentFightId]); //deps\r\n\r\n  //returns winners by rounds and overall\r\n  const calculateWinner = () => {\r\n    //calculates the winner for each round\r\n    const roundWinner = (r: Round): number => {\r\n      switch (r.Warrior1Attack) {\r\n        case 0: {\r\n          if (r.Warrior2Attack === 0) return 0; //paper - paper: tie\r\n          else if (r.Warrior2Attack === 1) return 2; //paper - scissors - w2\r\n          else if (r.Warrior2Attack === 2) return 1; //paper - rock - w1\r\n          break;\r\n        }\r\n        case 1: {\r\n          if (r.Warrior2Attack === 0) return 1; //scissors - paper: w1\r\n          else if (r.Warrior2Attack === 1) return 0; //scissors - scissors - tie\r\n          else if (r.Warrior2Attack === 2) return 2; //scissors - rock - w2\r\n          break;\r\n        }\r\n        case 2: {\r\n          if (r.Warrior2Attack === 0) return 2; //rock - paper: w2\r\n          else if (r.Warrior2Attack === 1) return 1; //rock - scissors - w1\r\n          else if (r.Warrior2Attack === 2) return 0; //rock - rock - tie\r\n          break;\r\n        }\r\n      }\r\n      return -99;\r\n    };\r\n\r\n    let winner: number[] = []; //winners of each round, example \r\n    //[0,1,2] - round 1-tie, 2-player1, 3-player2\r\n\r\n    let counts: number[] = [0, 0, 0]; //frequency of rounds won, example\r\n    //[2,1,0] - 2 rounds were tied, player1 won 1 round - player1 wins\r\n\r\n    fightResult.Rounds.map((round) =>\r\n      winner.push(roundWinner(round)) //populate the round winners array\r\n    );\r\n\r\n    for (const num of winner) {\r\n      counts[num] = counts[num] ? counts[num] + 1 : 1; //count frequency of rounds won\r\n    }\r\n\r\n    //player1 won at least 2 rounds or he won 1 and tied 2 - player1 wins\r\n    if (counts[1] > 1 || (counts[1] > 0 && counts[0] > 1)) return { roundWinners: winner, matchWinner: 1 };\r\n\r\n    //player2 won at least 2 rounds or he won 1 and tied 2 - player2 wins \r\n    else if (counts[2] > 1 || (counts[2] > 0 && counts[0] > 1)) return { roundWinners: winner, matchWinner: 2 };\r\n\r\n    //none of the above happened, players are tied\r\n    else if (counts[0] > 1) return { roundWinners: winner, matchWinner: 0 };\r\n\r\n    return -99;\r\n  };\r\n\r\n  //check if warrior object is ready to be sent to the server - if yes, send it\r\n  const validateForm = () => {\r\n    let err: number = 0; //error code as defined in errors.ts\r\n    if (\r\n      warrior.Name.length <= 0) err = 1 //no name input\r\n    else if (\r\n      warrior.Name.length >= 26) err = 2 //name too long\r\n    else if (!warriorTypeSet.has(warrior.WarriorType)) err = 3 //invalid warrior type - unlikely\r\n    else if (warrior.Attacks.length !== 3) err = 4 //invalid length of the Attacks array - unlikely\r\n    else if (!warriorAttacksSet.has(warrior.Attacks[0])) err = 5 //warrior attack #x is not selected\r\n    else if (!warriorAttacksSet.has(warrior.Attacks[1])) err = 6\r\n    else if (!warriorAttacksSet.has(warrior.Attacks[2])) err = 7\r\n    if (err === 0) { //no error\r\n      Register(warrior).then((result) => {\r\n        if (result.data.result) {\r\n          setCurrentFightId(result.data.result.id);\r\n          setWaitingScreen(true);\r\n        }\r\n        else if (result.data.error) {\r\n          setSeverity(\"error\");\r\n          setMessage(result.data.error.message);\r\n          setDialogOpen(true);\r\n        }\r\n      }\r\n      );\r\n    } else { setMessage(errors[err - 1]); setSeverity(\"error\"); setDialogOpen(true) }; //display error\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        textAlign: \"center\",\r\n        maxWidth: \"45vw\",\r\n        marginLeft: \"30vw\",\r\n      }}\r\n    >\r\n      <Dialog severity={severity} open={dialogOpen} setOpen={setDialogOpen} message={message} />\r\n      {warriorSelection ? (\r\n        <SelectWarrior warrior={warrior} setWarrior={setWarrior} setWarriorSelection={setWarriorSelection} />\r\n      ) : waitingScreen ? (\r\n        <Waiting warrior={warrior} currentFightId={currentFightId} setCurrentFightId={setCurrentFightId} setWaitingScreen={setWaitingScreen} setSeverity={setSeverity} setMessage={setMessage} setDialogOpen={setDialogOpen} />\r\n      ) : fightingScreen && fightResult ? (\r\n        <Fighting warrior={warrior} fightResult={fightResult} setSeverity={setSeverity} setMessage={setMessage} setDialogOpen={setDialogOpen} />\r\n      ) : doneScreen ? (\r\n        <Done fightResult={fightResult} calculateMatchWinner={calculateMatchWinner} calculateWinner={calculateWinner} setDoneScreen={setDoneScreen} setWaitingScreen={setWaitingScreen} validateForm={validateForm} />\r\n      ) : (\r\n        <Home warrior={warrior} setWarrior={setWarrior} setWarriorSelection={setWarriorSelection} validateForm={validateForm} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Router;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}